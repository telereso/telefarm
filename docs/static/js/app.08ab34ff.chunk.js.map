{"version":3,"sources":["App.tsx","screens/HomeScreen.tsx","screens/DeviceScreen.tsx","webpack:////mnt/c/laragon/www/telefarm/index.js?34e0","assets sync /^/.//.*/.png$","assets/Android SDK built for x86_64.png","assets/HUAWEI VNS-L31.png","assets/JKM-LX2.png"],"names":["WebBrowser","Stack","createStackNavigator","App","Navigator","Screen","name","component","LoginScreen","HomeScreen","DeviceScreen","navigation","BroadcastChannel","onmessage","messageEvent","global","idToekn","data","navigate","style","flex","alignItems","justifyContent","className","data-onsuccess","data-theme","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","useState","devices","seDevices","stateRef","useRef","fetchDevices","fetch","fcmToken","method","headers","then","response","json","current","useEffect","onMessage","payload","a","async","state","filter","serial","map","e","url","console","log","renderItem","item","abi","height","locale","manufacturer","model","width","Title","Divider","styles","deviceContainer","deviceImage","resizeMode","source","require","deviceInfo","padding","deviceReserve","disabled","color","onPress","reserve","title","accessibilityLabel","numColumns","keyExtractor","index","getToken","vapidKey","currentToken","catch","err","StyleSheet","create","flexDirection","marginStart","position","bottom","right","src","params","registerRootComponent","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/app.08ab34ff.chunk.js","sourcesContent":["import 'react-native-gesture-handler';\r\nimport React, {Component} from 'react';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport {createStackNavigator} from '@react-navigation/stack';\r\nimport {HomeScreen} from \"./screens/HomeScreen\";\r\nimport {DeviceScreen} from \"./screens/DeviceScreen\";\r\nimport * as WebBrowser from 'expo-web-browser';\r\nimport * as Google from 'expo-auth-session/providers/google';\r\nimport {Button, View} from \"react-native\";\r\n\r\nWebBrowser.maybeCompleteAuthSession();\r\nconst Stack = createStackNavigator();\r\n\r\n\r\nexport default function App() {\r\n    return (\r\n        <NavigationContainer>\r\n            <Stack.Navigator>\r\n                <Stack.Screen name=\"Login\" component={LoginScreen}/>\r\n                <Stack.Screen name=\"Select Device\" component={HomeScreen}/>\r\n                <Stack.Screen name=\"Device\" component={DeviceScreen}/>\r\n            </Stack.Navigator>\r\n        </NavigationContainer>\r\n    );\r\n}\r\n\r\nfunction onSingIn(googleUser: any=null,e:any=null) {\r\n    console.log(\"ID: \"); // Don't send this directly to your server!\r\n    console.log(googleUser); // Don't send this directly to your server!\r\n    console.log(e); // Don't send this directly to your server!\r\n    // var profile = googleUser.getBasicProfile();\r\n    // console.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\r\n    // console.log('Full Name: ' + profile.getName());\r\n    // console.log('Given Name: ' + profile.getGivenName());\r\n    // console.log('Family Name: ' + profile.getFamilyName());\r\n    // console.log(\"Image URL: \" + profile.getImageUrl());\r\n    // console.log(\"Email: \" + profile.getEmail());\r\n    //\r\n    // // The ID token you need to pass to your backend:\r\n    // var id_token = googleUser.getAuthResponse().id_token;\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport function LoginScreen({ navigation }) {\r\n    // const [request, response, promptAsync] = Google.useAuthRequest({\r\n    //     webClientId: '193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com',\r\n    // });\r\n    //\r\n    // React.useEffect(() => {\r\n    //     if (response?.type === 'success') {\r\n    //         const {authentication} = response;\r\n    //         console.log(authentication)\r\n    //         console.log(response)\r\n    //         console.log(request)\r\n    //     }\r\n    // }, [response]);\r\n    //\r\n    const channel = new BroadcastChannel(\"auth-channel\");\r\n    channel.onmessage = (messageEvent) => {\r\n        global.idToekn = messageEvent.data\r\n        navigation.navigate('Select Device')\r\n    }\r\n    return (\r\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n            <div className=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\"/>\r\n\r\n            {/*<Button*/}\r\n            {/*    disabled={!request}*/}\r\n            {/*    title=\"Login\"*/}\r\n            {/*    onPress={async () => {*/}\r\n            {/*        promptAsync();*/}\r\n            {/*        // const loginTopic = `idtoken_${new Date().getTime()}`*/}\r\n            {/*        // let result = await WebBrowser.openBrowserAsync(`http://localhost?topic=${loginTopic}`);*/}\r\n            {/*        // const pubSubClient = new PubSub();*/}\r\n            {/*        // const subscription = pubSubClient.subscription(loginTopic);*/}\r\n            {/*        //*/}\r\n            {/*        // // Create an event handler to handle messages*/}\r\n            {/*        // let messageCount = 0;*/}\r\n            {/*        // const messageHandler = (message: { id: any; data: any; attributes: any; ack: () => void; }) => {*/}\r\n            {/*        //     console.log(`Received message ${message.id}:`);*/}\r\n            {/*        //     console.log(`\\tData: ${message.data}`);*/}\r\n            {/*        //     console.log(`\\tAttributes: ${message.attributes}`);*/}\r\n            {/*        //     messageCount += 1;*/}\r\n            {/*        //*/}\r\n            {/*        //     // \"Ack\" (acknowledge receipt of) the message*/}\r\n            {/*        //     message.ack();*/}\r\n            {/*        // };*/}\r\n            {/*        //*/}\r\n            {/*        // // Listen for new messages until timeout is hit*/}\r\n            {/*        // subscription.on('message', messageHandler);*/}\r\n            {/*        //*/}\r\n            {/*        // setTimeout(() => {*/}\r\n            {/*        //     subscription.removeListener('message', messageHandler);*/}\r\n            {/*        //     console.log(`${messageCount} message(s) received.`);*/}\r\n            {/*        // }, 60 * 1000);*/}\r\n\r\n            {/*    }}*/}\r\n            {/*/>*/}\r\n        </View>\r\n    );\r\n    // const myHTML = \"<html lang=\\\"en\\\">\\n\" +\r\n    //     \"<head>\\n\" +\r\n    //     \"    <meta name=\\\"google-signin-scope\\\" content=\\\"profile email\\\">\\n\" +\r\n    //     \"    <meta name=\\\"google-signin-client_id\\\" content=\\\"193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com\\\">\\n\" +\r\n    //     \"    <script src=\\\"https://apis.google.com/js/platform.js\\\"expo install expo-web-browser></script>\\n\" +\r\n    //     \"</head>\\n\" +\r\n    //     \"<body>\\n\" +\r\n    //     \"<div class=\\\"g-signin2\\\" data-onsuccess=\\\"onSignIn\\\" data-theme=\\\"dark\\\"></div>\\n\" +\r\n    //     \"<script>\\n\" +\r\n    //     \"    function onSignIn(googleUser) {\\n\" +\r\n    //     \"        // Useful data for your client-side scripts:\\n\" +\r\n    //     \"        var profile = googleUser.getBasicProfile();\\n\" +\r\n    //     \"        console.log(\\\"ID: \\\" + profile.getId()); // Don't send this directly to your server!\\n\" +\r\n    //     \"        console.log('Full Name: ' + profile.getName());\\n\" +\r\n    //     \"        console.log('Given Name: ' + profile.getGivenName());\\n\" +\r\n    //     \"        console.log('Family Name: ' + profile.getFamilyName());\\n\" +\r\n    //     \"        console.log(\\\"Image URL: \\\" + profile.getImageUrl());\\n\" +\r\n    //     \"        console.log(\\\"Email: \\\" + profile.getEmail());\\n\" +\r\n    //     \"\\n\" +\r\n    //     \"        // The ID token you need to pass to your backend:\\n\" +\r\n    //     \"        var id_token = googleUser.getAuthResponse().id_token;\\n\" +\r\n    //     \"        console.log(\\\"ID Token: \\\" + id_token);\\n\" +\r\n    //     \"    }\\n\" +\r\n    //     \"</script>\\n\" +\r\n    //     \"</body>\\n\" +\r\n    //     \"</html>\"\r\n    // return <iframe width={200} height={200} src={\"data:text/html,\"+encodeURIComponent(myHTML)}/>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { Button, FlatList, Image, StyleSheet, Text, View } from \"react-native\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Card } from 'react-native-elements'\r\nimport * as firebase from 'firebase/app';\r\nimport \"firebase/messaging\";\r\nimport * as WebBrowser from 'expo-web-browser';\r\n\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyByJlNuPKr9mQ_MmW0xw1_AQYfMDZ3rXwg\",\r\n    authDomain: \"instamaterial-2eb76.firebaseapp.com\",\r\n    projectId: \"instamaterial-2eb76\",\r\n    storageBucket: \"instamaterial-2eb76.appspot.com\",\r\n    messagingSenderId: \"193172152804\",\r\n    appId: \"1:193172152804:web:72f74e5f7ac226d409a7f1\",\r\n    measurementId: \"G-5KJ4F2NMQC\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nconst messaging = firebase.messaging();\r\nmessaging.getToken({ vapidKey: \"BMsOZS5g4PFGm0a2XRjl0aHfsJ0B-HxWIXHb8f7vXmKwPKeSfCvFom6q4aB1bmP7xrangd8M8A_RTcd_BnjTvzA\" }).then((currentToken) => {\r\n    if (currentToken) {\r\n        global.fcmToken = currentToken\r\n    } else {\r\n        // Show permission request UI\r\n        console.log('No registration token available. Request permission to generate one.');\r\n        // ...\r\n    }\r\n}).catch((err) => {\r\n    console.log('An error occurred while retrieving token. ', err);\r\n    // ...\r\n});\r\n\r\nexport function HomeScreen({ navigation }) {\r\n    const [devices, seDevices] = useState([])\r\n    const stateRef = useRef(devices);\r\n    stateRef.current = devices\r\n\r\n    function fetchDevices() {\r\n        fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/devices?token=${global.fcmToken}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${global.idToekn}`\r\n\r\n            }\r\n        }).then((response) => response.json()).then(data => {\r\n            seDevices(data)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        messaging.onMessage(async (payload) => {\r\n            switch (payload.data.state) {\r\n                case \"NA\":\r\n                    seDevices(devices.filter(({ serial }) => serial != payload.data.serial))\r\n                    break;\r\n                case \"devices_refreshed\":\r\n                    fetchDevices();\r\n                break;    \r\n                case \"reserved\":\r\n                    seDevices(stateRef.current.map(e => {\r\n                        if (e.serial == payload.data.serial) {\r\n                            e['state'] = 'reserved'\r\n                        }\r\n                        return e\r\n                    }));\r\n                    break;    \r\n                case \"A\":\r\n                    seDevices(stateRef.current.map(e => {\r\n                        if (e.serial == payload.data.serial) {\r\n                            e['state'] = null\r\n                        }\r\n                        return e\r\n                    }));\r\n                    break;\r\n                case \"setup\":\r\n                    seDevices(stateRef.current.map(e => {\r\n                        if (e.serial == payload.data.serial) {\r\n                            e['state'] = `${payload.data.state}...`\r\n                        }\r\n                        return e\r\n                    }));\r\n                    break;\r\n                case \"ready\":\r\n                    seDevices(stateRef.current.map(e => {\r\n                        if (e.serial == payload.data.serial) {\r\n                            e['state'] = 'open'\r\n                            e['url'] = payload.data.url\r\n                        }\r\n                        return e\r\n                    }));\r\n\r\n                    break;\r\n                default:\r\n                    console.log(payload)\r\n            }\r\n            // const { title, ...options } = payload.notification;\r\n            // navigator.serviceWorker.register(\"firebase-messaging-sw.js\");\r\n            // function showNotification() {\r\n            //     Notification.requestPermission(function (result) {\r\n            //         if (result === \"granted\") {\r\n            //             navigator.serviceWorker.ready.then(function (registration) {\r\n            //                 registration.showNotification(payload.notification.title, {\r\n            //                     body: payload.notification.body,\r\n            //                     tag: payload.notification.tag,\r\n            //                 });\r\n            //             });\r\n            //         }\r\n            //     });\r\n            // }\r\n            // showNotification();\r\n        });\r\n\r\n        fetchDevices()\r\n        // setInterval(() => {\r\n        //     fetchDevices()\r\n\r\n        // }, 30000)\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n            <FlatList\r\n                data={devices}\r\n                renderItem={({ item: { serial, abi, height, locale, manufacturer, model, name, width, state, url } }) => (\r\n                    <Card>\r\n                        <Card.Title>{name}</Card.Title>\r\n                        <Card.Divider />{\r\n                            <View style={styles.deviceContainer}>\r\n                                <Image style={styles.deviceImage}\r\n                                    resizeMode=\"center\"\r\n                                    source={require(`../assets/${model}.png`)}\r\n                                />\r\n                                <View style={styles.deviceInfo}>\r\n                                    <Text>{manufacturer}</Text>\r\n                                    <View style={styles.padding} />\r\n                                    <Text>{model}</Text>\r\n                                    <View style={styles.padding} />\r\n                                    <Text>{`${width}X${height}`}</Text>\r\n                                    <View style={styles.padding} />\r\n                                    <Text>{abi}</Text>\r\n                                    <View style={styles.padding} />\r\n                                    <Text>{locale}</Text>\r\n                                    <View style={styles.padding} />\r\n\r\n                                    <View style={styles.deviceReserve}>\r\n\r\n                                        <Button\r\n                                            disabled={state === \"progress...\" || state === \"setup...\" || state === 'reserved'}\r\n                                            color=\"#66BB6A\"\r\n                                            onPress={async () => {\r\n                                                if (state == \"open\") {\r\n                                                    let result = await WebBrowser.openBrowserAsync(url);\r\n                                                } else {\r\n                                                    seDevices(devices.map(e => {\r\n                                                        if (e.serial === serial) {\r\n                                                            e['state'] = 'progress...'\r\n                                                        }\r\n                                                        return e\r\n                                                    }))\r\n                                                    reserve(serial)\r\n                                                }\r\n                                            }}\r\n                                            title={state || \"Reserve\"}\r\n                                            accessibilityLabel=\"Reserve a phone\"\r\n                                        />\r\n                                    </View>\r\n                                </View>\r\n                            </View>\r\n\r\n                        }\r\n                    </Card>\r\n                )}\r\n                //Setting the number of column\r\n                numColumns={3}\r\n                keyExtractor={(item, index) => index}\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction reserve(serial: string) {\r\n    fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/requestDevice?serial=${serial}&token=${global.fcmToken}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${global.idToekn}`\r\n        }\r\n    }).then((response) => response.json()).then(data => {\r\n    })\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    deviceContainer: {\r\n        flex: 1,\r\n        flexDirection: \"row\",\r\n    },\r\n    deviceImage: {\r\n        width: 100,\r\n        height: 200\r\n    },\r\n    deviceInfo: {\r\n        flex: 1,\r\n        marginStart: 10,\r\n        flexDirection: \"column\",\r\n    },\r\n    deviceReserve: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        right: 0\r\n    },\r\n    padding: {\r\n        padding: 4\r\n    },\r\n});\r\n","import {Text, View} from \"react-native\";\r\nimport React from \"react\";\r\n\r\nexport function DeviceScreen({navigation}) {\r\n    return (\r\n        <iframe src={navigation?.params?.url || \"https://google.com\"  } />\r\n    );\r\n}\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in the Expo client or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n","var map = {\n\t\"./Android SDK built for x86_64.png\": 306,\n\t\"./HUAWEI VNS-L31.png\": 307,\n\t\"./JKM-LX2.png\": 308\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 305;","module.exports = __webpack_public_path__ + \"static/media/Android SDK built for x86_64.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/HUAWEI VNS-L31.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/JKM-LX2.be564da8.png\";"],"sourceRoot":""}