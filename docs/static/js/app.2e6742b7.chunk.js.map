{"version":3,"sources":["App.tsx","screens/HomeScreen.tsx","screens/DeviceScreen.tsx","webpack:////Users/ahmedalnaami/IdeaProjects/nexus-react/index.js?2607","assets sync /^/.//.*/.png$","assets/Android SDK built for x86_64.png","assets/HUAWEI VNS-L31.png","assets/JKM-LX2.png"],"names":["WebBrowser","Stack","createStackNavigator","App","Navigator","Screen","name","component","LoginScreen","HomeScreen","DeviceScreen","navigation","BroadcastChannel","onmessage","messageEvent","global","idToekn","data","navigate","style","flex","alignItems","justifyContent","className","data-onsuccess","data-theme","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","useState","devices","seDevices","stateRef","useRef","fetchDevices","fetch","fcmToken","method","headers","then","response","json","current","useEffect","onMessage","payload","a","async","state","filter","serial","map","e","url","console","log","renderItem","item","abi","height","locale","manufacturer","model","width","Title","Divider","styles","deviceContainer","deviceImage","resizeMode","source","require","deviceInfo","padding","deviceReserve","disabled","color","onPress","reserve","title","accessibilityLabel","numColumns","keyExtractor","index","getToken","vapidKey","currentToken","catch","err","StyleSheet","create","flexDirection","marginStart","position","bottom","right","src","params","registerRootComponent","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/app.2e6742b7.chunk.js","sourcesContent":["import 'react-native-gesture-handler';\nimport React, {Component} from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {HomeScreen} from \"./screens/HomeScreen\";\nimport {DeviceScreen} from \"./screens/DeviceScreen\";\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\nimport {Button, View} from \"react-native\";\n\nWebBrowser.maybeCompleteAuthSession();\nconst Stack = createStackNavigator();\n\n\nexport default function App() {\n    return (\n        <NavigationContainer>\n            <Stack.Navigator>\n                <Stack.Screen name=\"Login\" component={LoginScreen}/>\n                <Stack.Screen name=\"Select Device\" component={HomeScreen}/>\n                <Stack.Screen name=\"Device\" component={DeviceScreen}/>\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n\nfunction onSingIn(googleUser: any=null,e:any=null) {\n    console.log(\"ID: \"); // Don't send this directly to your server!\n    console.log(googleUser); // Don't send this directly to your server!\n    console.log(e); // Don't send this directly to your server!\n    // var profile = googleUser.getBasicProfile();\n    // console.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\n    // console.log('Full Name: ' + profile.getName());\n    // console.log('Given Name: ' + profile.getGivenName());\n    // console.log('Family Name: ' + profile.getFamilyName());\n    // console.log(\"Image URL: \" + profile.getImageUrl());\n    // console.log(\"Email: \" + profile.getEmail());\n    //\n    // // The ID token you need to pass to your backend:\n    // var id_token = googleUser.getAuthResponse().id_token;\n\n\n}\n\n\n\nexport function LoginScreen({ navigation }) {\n    // const [request, response, promptAsync] = Google.useAuthRequest({\n    //     webClientId: '193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com',\n    // });\n    //\n    // React.useEffect(() => {\n    //     if (response?.type === 'success') {\n    //         const {authentication} = response;\n    //         console.log(authentication)\n    //         console.log(response)\n    //         console.log(request)\n    //     }\n    // }, [response]);\n    //\n    const channel = new BroadcastChannel(\"auth-channel\");\n    channel.onmessage = (messageEvent) => {\n        global.idToekn = messageEvent.data\n        navigation.navigate('Select Device')\n    }\n    return (\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n            <div className=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\"/>\n\n            {/*<Button*/}\n            {/*    disabled={!request}*/}\n            {/*    title=\"Login\"*/}\n            {/*    onPress={async () => {*/}\n            {/*        promptAsync();*/}\n            {/*        // const loginTopic = `idtoken_${new Date().getTime()}`*/}\n            {/*        // let result = await WebBrowser.openBrowserAsync(`http://localhost?topic=${loginTopic}`);*/}\n            {/*        // const pubSubClient = new PubSub();*/}\n            {/*        // const subscription = pubSubClient.subscription(loginTopic);*/}\n            {/*        //*/}\n            {/*        // // Create an event handler to handle messages*/}\n            {/*        // let messageCount = 0;*/}\n            {/*        // const messageHandler = (message: { id: any; data: any; attributes: any; ack: () => void; }) => {*/}\n            {/*        //     console.log(`Received message ${message.id}:`);*/}\n            {/*        //     console.log(`\\tData: ${message.data}`);*/}\n            {/*        //     console.log(`\\tAttributes: ${message.attributes}`);*/}\n            {/*        //     messageCount += 1;*/}\n            {/*        //*/}\n            {/*        //     // \"Ack\" (acknowledge receipt of) the message*/}\n            {/*        //     message.ack();*/}\n            {/*        // };*/}\n            {/*        //*/}\n            {/*        // // Listen for new messages until timeout is hit*/}\n            {/*        // subscription.on('message', messageHandler);*/}\n            {/*        //*/}\n            {/*        // setTimeout(() => {*/}\n            {/*        //     subscription.removeListener('message', messageHandler);*/}\n            {/*        //     console.log(`${messageCount} message(s) received.`);*/}\n            {/*        // }, 60 * 1000);*/}\n\n            {/*    }}*/}\n            {/*/>*/}\n        </View>\n    );\n    // const myHTML = \"<html lang=\\\"en\\\">\\n\" +\n    //     \"<head>\\n\" +\n    //     \"    <meta name=\\\"google-signin-scope\\\" content=\\\"profile email\\\">\\n\" +\n    //     \"    <meta name=\\\"google-signin-client_id\\\" content=\\\"193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com\\\">\\n\" +\n    //     \"    <script src=\\\"https://apis.google.com/js/platform.js\\\"expo install expo-web-browser></script>\\n\" +\n    //     \"</head>\\n\" +\n    //     \"<body>\\n\" +\n    //     \"<div class=\\\"g-signin2\\\" data-onsuccess=\\\"onSignIn\\\" data-theme=\\\"dark\\\"></div>\\n\" +\n    //     \"<script>\\n\" +\n    //     \"    function onSignIn(googleUser) {\\n\" +\n    //     \"        // Useful data for your client-side scripts:\\n\" +\n    //     \"        var profile = googleUser.getBasicProfile();\\n\" +\n    //     \"        console.log(\\\"ID: \\\" + profile.getId()); // Don't send this directly to your server!\\n\" +\n    //     \"        console.log('Full Name: ' + profile.getName());\\n\" +\n    //     \"        console.log('Given Name: ' + profile.getGivenName());\\n\" +\n    //     \"        console.log('Family Name: ' + profile.getFamilyName());\\n\" +\n    //     \"        console.log(\\\"Image URL: \\\" + profile.getImageUrl());\\n\" +\n    //     \"        console.log(\\\"Email: \\\" + profile.getEmail());\\n\" +\n    //     \"\\n\" +\n    //     \"        // The ID token you need to pass to your backend:\\n\" +\n    //     \"        var id_token = googleUser.getAuthResponse().id_token;\\n\" +\n    //     \"        console.log(\\\"ID Token: \\\" + id_token);\\n\" +\n    //     \"    }\\n\" +\n    //     \"</script>\\n\" +\n    //     \"</body>\\n\" +\n    //     \"</html>\"\n    // return <iframe width={200} height={200} src={\"data:text/html,\"+encodeURIComponent(myHTML)}/>\n\n}\n\n\n\n\n\n","import { Button, FlatList, Image, StyleSheet, Text, View } from \"react-native\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Card } from 'react-native-elements'\nimport * as firebase from 'firebase/app';\nimport \"firebase/messaging\";\nimport * as WebBrowser from 'expo-web-browser';\n\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyByJlNuPKr9mQ_MmW0xw1_AQYfMDZ3rXwg\",\n    authDomain: \"instamaterial-2eb76.firebaseapp.com\",\n    projectId: \"instamaterial-2eb76\",\n    storageBucket: \"instamaterial-2eb76.appspot.com\",\n    messagingSenderId: \"193172152804\",\n    appId: \"1:193172152804:web:72f74e5f7ac226d409a7f1\",\n    measurementId: \"G-5KJ4F2NMQC\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\nmessaging.getToken({ vapidKey: \"BMsOZS5g4PFGm0a2XRjl0aHfsJ0B-HxWIXHb8f7vXmKwPKeSfCvFom6q4aB1bmP7xrangd8M8A_RTcd_BnjTvzA\" }).then((currentToken) => {\n    if (currentToken) {\n        global.fcmToken = currentToken\n    } else {\n        // Show permission request UI\n        console.log('No registration token available. Request permission to generate one.');\n        // ...\n    }\n}).catch((err) => {\n    console.log('An error occurred while retrieving token. ', err);\n    // ...\n});\n\nexport function HomeScreen({ navigation }) {\n    const [devices, seDevices] = useState([])\n    const stateRef = useRef(devices);\n    stateRef.current = devices\n\n    function fetchDevices() {\n        fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/devices?token=${global.fcmToken}`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${global.idToekn}`\n\n            }\n        }).then((response) => response.json()).then(data => {\n            seDevices(data)\n        })\n    }\n\n    useEffect(() => {\n        messaging.onMessage(async (payload) => {\n            switch (payload.data.state) {\n                case \"NA\":\n                    seDevices(devices.filter(({ serial }) => serial != payload.data.serial))\n                    break;\n                case \"devices_refreshed\":\n                    fetchDevices();\n                break;    \n                case \"reserved\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == payload.data.serial) {\n                            e['state'] = 'reserved'\n                        }\n                        return e\n                    }));\n                    break;    \n                case \"A\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == payload.data.serial) {\n                            e['state'] = null\n                        }\n                        return e\n                    }));\n                    break;\n                case \"setup\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == payload.data.serial) {\n                            e['state'] = `${payload.data.state}...`\n                        }\n                        return e\n                    }));\n                    break;\n                case \"ready\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == payload.data.serial) {\n                            e['state'] = 'open'\n                            e['url'] = payload.data.url\n                        }\n                        return e\n                    }));\n\n                    break;\n                default:\n                    console.log(payload)\n            }\n            // const { title, ...options } = payload.notification;\n            // navigator.serviceWorker.register(\"firebase-messaging-sw.js\");\n            // function showNotification() {\n            //     Notification.requestPermission(function (result) {\n            //         if (result === \"granted\") {\n            //             navigator.serviceWorker.ready.then(function (registration) {\n            //                 registration.showNotification(payload.notification.title, {\n            //                     body: payload.notification.body,\n            //                     tag: payload.notification.tag,\n            //                 });\n            //             });\n            //         }\n            //     });\n            // }\n            // showNotification();\n        });\n\n        fetchDevices()\n        // setInterval(() => {\n        //     fetchDevices()\n\n        // }, 30000)\n\n    }, []);\n\n    return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n            <FlatList\n                data={devices}\n                renderItem={({ item: { serial, abi, height, locale, manufacturer, model, name, width, state, url } }) => (\n                    <Card>\n                        <Card.Title>{name}</Card.Title>\n                        <Card.Divider />{\n                            <View style={styles.deviceContainer}>\n                                <Image style={styles.deviceImage}\n                                    resizeMode=\"center\"\n                                    source={require(`../assets/${model}.png`)}\n                                />\n                                <View style={styles.deviceInfo}>\n                                    <Text>{manufacturer}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{model}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{`${width}X${height}`}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{abi}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{locale}</Text>\n                                    <View style={styles.padding} />\n\n                                    <View style={styles.deviceReserve}>\n\n                                        <Button\n                                            disabled={state === \"progress...\" || state === \"setup...\" || state === 'reserved'}\n                                            color=\"#66BB6A\"\n                                            onPress={async () => {\n                                                if (state == \"open\") {\n                                                    let result = await WebBrowser.openBrowserAsync(url);\n                                                } else {\n                                                    seDevices(devices.map(e => {\n                                                        if (e.serial === serial) {\n                                                            e['state'] = 'progress...'\n                                                        }\n                                                        return e\n                                                    }))\n                                                    reserve(serial)\n                                                }\n                                            }}\n                                            title={state || \"Reserve\"}\n                                            accessibilityLabel=\"Reserve a phone\"\n                                        />\n                                    </View>\n                                </View>\n                            </View>\n\n                        }\n                    </Card>\n                )}\n                //Setting the number of column\n                numColumns={3}\n                keyExtractor={(item, index) => index}\n            />\n        </View>\n    );\n}\n\nfunction reserve(serial: string) {\n    fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/requestDevice?serial=${serial}&token=${global.fcmToken}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${global.idToekn}`\n        }\n    }).then((response) => response.json()).then(data => {\n    })\n}\n\nconst styles = StyleSheet.create({\n    deviceContainer: {\n        flex: 1,\n        flexDirection: \"row\",\n    },\n    deviceImage: {\n        width: 100,\n        height: 200\n    },\n    deviceInfo: {\n        flex: 1,\n        marginStart: 10,\n        flexDirection: \"column\",\n    },\n    deviceReserve: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0\n    },\n    padding: {\n        padding: 4\n    },\n});\n","import {Text, View} from \"react-native\";\nimport React from \"react\";\n\nexport function DeviceScreen({navigation}) {\n    return (\n        <iframe src={navigation?.params?.url || \"https://google.com\"  } />\n    );\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","var map = {\n\t\"./Android SDK built for x86_64.png\": 306,\n\t\"./HUAWEI VNS-L31.png\": 307,\n\t\"./JKM-LX2.png\": 308\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 305;","module.exports = __webpack_public_path__ + \"static/media/Android SDK built for x86_64.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/HUAWEI VNS-L31.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/JKM-LX2.be564da8.png\";"],"sourceRoot":""}