{"version":3,"sources":["App.tsx","screens/HomeScreen.tsx","screens/DeviceScreen.tsx","webpack:////Users/ahmedalnaami/IdeaProjects/Telefarm/index.js?36cc","assets sync /^/.//.*/.png$","assets/Android SDK built for x86_64.png","assets/HUAWEI VNS-L31.png","assets/JKM-LX2.png"],"names":["WebBrowser","Stack","createStackNavigator","App","Navigator","Screen","name","component","LoginScreen","HomeScreen","DeviceScreen","navigation","useEffect","BroadcastChannel","onmessage","messageEvent","global","user","data","userInfo","jwt","decode","id_token","navigate","style","flex","alignItems","justifyContent","className","data-onsuccess","data-theme","useState","devices","seDevices","stateRef","useRef","fetchDevices","fetch","method","headers","then","response","json","current","currentReconnectionAttempts","socket","io","autoConnect","reconnection","withCredentials","query","token","on","tryReconnect","setTimeout","open","err","onAny","eventName","console","log","id","message","state","filter","serial","map","e","url","connect","renderItem","item","abi","height","locale","manufacturer","model","width","Title","Divider","styles","deviceContainer","deviceImage","resizeMode","source","require","deviceInfo","padding","deviceReserve","disabled","color","onPress","a","async","reserve","title","accessibilityLabel","numColumns","keyExtractor","index","StyleSheet","create","flexDirection","marginStart","position","bottom","right","src","params","registerRootComponent","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/app.38a87d2a.chunk.js","sourcesContent":["import 'react-native-gesture-handler';\nimport React, {useEffect,Component} from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {HomeScreen} from \"./screens/HomeScreen\";\nimport {DeviceScreen} from \"./screens/DeviceScreen\";\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Google from 'expo-auth-session/providers/google';\nimport {Button, View} from \"react-native\";\nimport jwt from \"jsonwebtoken\";\nimport { io } from \"socket.io-client\";\n\n\n\nWebBrowser.maybeCompleteAuthSession();\nconst Stack = createStackNavigator();\n\n\nexport default function App() {\n    return (\n        <NavigationContainer>\n            <Stack.Navigator>\n                <Stack.Screen name=\"Login\" component={LoginScreen}/>\n                <Stack.Screen name=\"Select Device\" component={HomeScreen}/>\n                <Stack.Screen name=\"Device\" component={DeviceScreen}/>\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n\nfunction onSingIn(googleUser: any=null,e:any=null) {\n    console.log(\"ID: \"); // Don't send this directly to your server!\n    console.log(googleUser); // Don't send this directly to your server!\n    console.log(e); // Don't send this directly to your server!\n    // var profile = googleUser.getBasicProfile();\n    // console.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\n    // console.log('Full Name: ' + profile.getName());\n    // console.log('Given Name: ' + profile.getGivenName());\n    // console.log('Family Name: ' + profile.getFamilyName());\n    // console.log(\"Image URL: \" + profile.getImageUrl());\n    // console.log(\"Email: \" + profile.getEmail());\n    //\n    // // The ID token you need to pass to your backend:\n    // var id_token = googleUser.getAuthResponse().id_token;\n\n\n}\n\n\n\nexport function LoginScreen({ navigation }) {\n    // const [request, response, promptAsync] = Google.useAuthRequest({\n    //     webClientId: '193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com',\n    // });\n    //\n    // React.useEffect(() => {\n    //     if (response?.type === 'success') {\n    //         const {authentication} = response;\n    //         console.log(authentication)\n    //         console.log(response)\n    //         console.log(request)\n    //     }\n    // }, [response]);\n    //\n    useEffect(() => {\n//        setTimeout(() => {\n//             const channel = new BroadcastChannel(\"auth-channel\");\n//             global.user = {}\n//             global.user.id_token = \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiZjhhODRkM2VjZDc3ZTlmMmFkNWYwNmZmZDI2MDcwMWRkMDZkOTAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiMTkzMTcyMTUyODA0LWswZjBtcG00MjNhYmo3Mmg4cGpxa2xhcnFzdnNpM3RiLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiMTkzMTcyMTUyODA0LWswZjBtcG00MjNhYmo3Mmg4cGpxa2xhcnFzdnNpM3RiLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTE2ODYwMjU5MTM1NTAxNzkyNDc4IiwiZW1haWwiOiJhaG1lZC5hbG5hYW1pOTJAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJtd2xoOWpwamdYZU1vZDZyMkVpOVVnIiwibmFtZSI6IkFobWVkIG5hIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdpcjJYT1p2VU9yOXM2Z1hCdUxEcElidlpMY3QzbnRsbDY2Ym9pX1pRPXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IkFobWVkIiwiZmFtaWx5X25hbWUiOiJuYSIsImxvY2FsZSI6ImVuLUdCIiwiaWF0IjoxNjI1OTc4OTQyLCJleHAiOjE2MjU5ODI1NDIsImp0aSI6ImZmNTI2NmY3NGZmOWQ3NjllZGVhYjYwOTQ3ZGU3ZTk4YzhiOThmZGMifQ.uqkEQZ_6pSJQxuGoJe2HmFVLdm_ebj53yIY2KDM6Vlw1_JDe4owrLpru7cZk2tk1VQ7NCpf3ZF-Pn8FpKGdff9IwiHtFQNt2PqPzMbqNcwA3Qdr2cTvFhPp8CLx_m47dkZ0YdZQoI9Cdr20nELGU1tMbSMvXozp-BF4HOq8yJoiLPjIh-IvWiAOb3FcQCesqNHXKMFafuhj2Q8WmhP9KurqL-s0zjr3C3hww6cW7wJCSAMs17S_4KW3Tb9kRUrE2dVqZljsBXGNpKH36UX2LU27KP0R1mIFoH_jSGu_LhJCUQ9JK5h23rRhUahE87lsxUXvXkfDO7jWj5no2bVjvOg\"\n//             channel.postMessage(global.user);\n//        }, 1000)\n\n        const channel = new BroadcastChannel(\"auth-channel\");\n        channel.onmessage = (messageEvent) => {\n            global.user = messageEvent.data\n            global.userInfo =  jwt.decode(global.user.id_token)\n            navigation.navigate('Select Device')\n        }\n    })\n    return (\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\n            <div className=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\"/>\n\n            {/*<Button*/}\n            {/*    disabled={!request}*/}\n            {/*    title=\"Login\"*/}\n            {/*    onPress={async () => {*/}\n            {/*        promptAsync();*/}\n            {/*        // const loginTopic = `idtoken_${new Date().getTime()}`*/}\n            {/*        // let result = await WebBrowser.openBrowserAsync(`http://localhost?topic=${loginTopic}`);*/}\n            {/*        // const pubSubClient = new PubSub();*/}\n            {/*        // const subscription = pubSubClient.subscription(loginTopic);*/}\n            {/*        //*/}\n            {/*        // // Create an event handler to handle messages*/}\n            {/*        // let messageCount = 0;*/}\n            {/*        // const messageHandler = (message: { id: any; data: any; attributes: any; ack: () => void; }) => {*/}\n            {/*        //     console.log(`Received message ${message.id}:`);*/}\n            {/*        //     console.log(`\\tData: ${message.data}`);*/}\n            {/*        //     console.log(`\\tAttributes: ${message.attributes}`);*/}\n            {/*        //     messageCount += 1;*/}\n            {/*        //*/}\n            {/*        //     // \"Ack\" (acknowledge receipt of) the message*/}\n            {/*        //     message.ack();*/}\n            {/*        // };*/}\n            {/*        //*/}\n            {/*        // // Listen for new messages until timeout is hit*/}\n            {/*        // subscription.on('message', messageHandler);*/}\n            {/*        //*/}\n            {/*        // setTimeout(() => {*/}\n            {/*        //     subscription.removeListener('message', messageHandler);*/}\n            {/*        //     console.log(`${messageCount} message(s) received.`);*/}\n            {/*        // }, 60 * 1000);*/}\n\n            {/*    }}*/}\n            {/*/>*/}\n        </View>\n    );\n    // const myHTML = \"<html lang=\\\"en\\\">\\n\" +\n    //     \"<head>\\n\" +\n    //     \"    <meta name=\\\"google-signin-scope\\\" content=\\\"profile email\\\">\\n\" +\n    //     \"    <meta name=\\\"google-signin-client_id\\\" content=\\\"193172152804-k0f0mpm423abj72h8pjqklarqsvsi3tb.apps.googleusercontent.com\\\">\\n\" +\n    //     \"    <script src=\\\"https://apis.google.com/js/platform.js\\\"expo install expo-web-browser></script>\\n\" +\n    //     \"</head>\\n\" +\n    //     \"<body>\\n\" +\n    //     \"<div class=\\\"g-signin2\\\" data-onsuccess=\\\"onSignIn\\\" data-theme=\\\"dark\\\"></div>\\n\" +\n    //     \"<script>\\n\" +\n    //     \"    function onSignIn(googleUser) {\\n\" +\n    //     \"        // Useful data for your client-side scripts:\\n\" +\n    //     \"        var profile = googleUser.getBasicProfile();\\n\" +\n    //     \"        console.log(\\\"ID: \\\" + profile.getId()); // Don't send this directly to your server!\\n\" +\n    //     \"        console.log('Full Name: ' + profile.getName());\\n\" +\n    //     \"        console.log('Given Name: ' + profile.getGivenName());\\n\" +\n    //     \"        console.log('Family Name: ' + profile.getFamilyName());\\n\" +\n    //     \"        console.log(\\\"Image URL: \\\" + profile.getImageUrl());\\n\" +\n    //     \"        console.log(\\\"Email: \\\" + profile.getEmail());\\n\" +\n    //     \"\\n\" +\n    //     \"        // The ID token you need to pass to your backend:\\n\" +\n    //     \"        var id_token = googleUser.getAuthResponse().id_token;\\n\" +\n    //     \"        console.log(\\\"ID Token: \\\" + id_token);\\n\" +\n    //     \"    }\\n\" +\n    //     \"</script>\\n\" +\n    //     \"</body>\\n\" +\n    //     \"</html>\"\n    // return <iframe width={200} height={200} src={\"data:text/html,\"+encodeURIComponent(myHTML)}/>\n\n}\n\n\n\n\n\n","import { Button, FlatList, Image, StyleSheet, Text, View } from \"react-native\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Card } from 'react-native-elements'\nimport * as firebase from 'firebase/app';\nimport \"firebase/messaging\";\nimport * as WebBrowser from 'expo-web-browser';\nimport { io } from \"socket.io-client\";\n\nexport function HomeScreen({ navigation }) {\n    const [devices, seDevices] = useState([])\n    const stateRef = useRef(devices);\n    stateRef.current = devices\n\n    function fetchDevices() {\n        fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/devices`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${global.user.id_token}`\n\n            }\n        }).then((response) => response.json()).then(data => {\n            seDevices(data)\n        })\n    }\n\n    useEffect(() => {\n        let currentReconnectionAttempts = 1\n        const reconnectionAttempts = 2\n        const reconnectionDelay = 2000\n        const host =\"https://proxy.telereso.io\";\n//        const host =\"http://localhost:8081\";\n        const socket = io(host, {\n                autoConnect: false,\n                reconnection: false,\n                withCredentials: true,\n                query: {token: global.user.id_token}\n        });\n\n        const tryReconnect = () => {\n          if(currentReconnectionAttempts >= reconnectionAttempts) return\n          currentReconnectionAttempts++\n          setTimeout(() => {\n            socket.io.open((err) => {\n              if (err) {\n                tryReconnect();\n              }\n            });\n          }, reconnectionDelay);\n        }\n\n        socket.io.on(\"close\", tryReconnect);\n\n\n        socket.onAny((eventName, ...args) => {\n          console.log(eventName);\n        });\n\n        socket.on(\"connect\", () => {\n//            global.token = `${global.userInfo.email}_${socket.id}`\n            global.token = socket.id\n            console.log(global.token); // x8WIv7-mJelg7on_ALbx\n        });\n\n        socket.on(\"connect_error\", (err) => {\n          console.log(`connect_error due to ${err.message}`);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(socket.id); // undefined\n        });\n\n        socket.on(\"device\", (data) => {\n            switch (data.state) {\n                case \"NA\":\n                    seDevices(devices.filter(({ serial }) => serial != data.serial))\n                    break;\n                case \"reserved\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == data.serial) {\n                            e['state'] = 'reserved'\n                        }\n                        return e\n                    }));\n                    break;\n                case \"A\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == data.serial) {\n                            e['state'] = null\n                        }\n                        return e\n                    }));\n                    break;\n                case \"setup\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == data.serial) {\n                            e['state'] = `${data.state}...`\n                        }\n                        return e\n                    }));\n                    break;\n                case \"ready\":\n                    seDevices(stateRef.current.map(e => {\n                        if (e.serial == data.serial) {\n                            e['state'] = 'open'\n                            e['url'] = data.url\n                        }\n                        return e\n                    }));\n\n                    break;\n                default:\n                    console.log(data)\n            }\n\n        });\n        socket.on(\"devices\", (data) => {\n            switch (data.state) {\n                case \"devices_refreshed\":\n                    fetchDevices();\n                break;\n            }\n            fetchDevices();\n        });\n\n        socket.connect()\n\n\n        fetchDevices()\n        // setInterval(() => {\n        //     fetchDevices()\n\n        // }, 30000)\n\n    }, []);\n\n    return (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n            <FlatList\n                data={devices}\n                renderItem={({ item: { serial, abi, height, locale, manufacturer, model, name, width, state, url } }) => (\n                    <Card>\n                        <Card.Title>{name}</Card.Title>\n                        <Card.Divider />{\n                            <View style={styles.deviceContainer}>\n                                <Image style={styles.deviceImage}\n                                    resizeMode=\"center\"\n                                    source={require(`../assets/${model}.png`)}\n                                />\n                                <View style={styles.deviceInfo}>\n                                    <Text>{manufacturer}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{model}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{`${width}X${height}`}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{abi}</Text>\n                                    <View style={styles.padding} />\n                                    <Text>{locale}</Text>\n                                    <View style={styles.padding} />\n\n                                    <View style={styles.deviceReserve}>\n\n                                        <Button\n                                            disabled={state === \"progress...\" || state === \"setup...\" || state === 'reserved'}\n                                            color=\"#66BB6A\"\n                                            onPress={async () => {\n                                                if (state == \"open\") {\n                                                    let result = await WebBrowser.openBrowserAsync(url);\n                                                } else {\n                                                    seDevices(devices.map(e => {\n                                                        if (e.serial === serial) {\n                                                            e['state'] = 'progress...'\n                                                        }\n                                                        return e\n                                                    }))\n                                                    reserve(serial)\n                                                }\n                                            }}\n                                            title={state || \"Reserve\"}\n                                            accessibilityLabel=\"Reserve a phone\"\n                                        />\n                                    </View>\n                                </View>\n                            </View>\n\n                        }\n                    </Card>\n                )}\n                //Setting the number of column\n                numColumns={3}\n                keyExtractor={(item, index) => index}\n            />\n        </View>\n    );\n}\n\nfunction reserve(serial: string) {\n    fetch(`https://us-central1-instamaterial-2eb76.cloudfunctions.net/requestDevice?serial=${serial}&token=${global.token}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${global.user.id_token}`\n        }\n    }).then((response) => response.json()).then(data => {\n    })\n}\n\nconst styles = StyleSheet.create({\n    deviceContainer: {\n        flex: 1,\n        flexDirection: \"row\",\n    },\n    deviceImage: {\n        width: 100,\n        height: 200\n    },\n    deviceInfo: {\n        flex: 1,\n        marginStart: 10,\n        flexDirection: \"column\",\n    },\n    deviceReserve: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0\n    },\n    padding: {\n        padding: 4\n    },\n});\n","import {Text, View} from \"react-native\";\nimport React from \"react\";\n\nexport function DeviceScreen({navigation}) {\n    return (\n        <iframe src={navigation?.params?.url || \"https://google.com\"  } />\n    );\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","var map = {\n\t\"./Android SDK built for x86_64.png\": 463,\n\t\"./HUAWEI VNS-L31.png\": 464,\n\t\"./JKM-LX2.png\": 465\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 462;","module.exports = __webpack_public_path__ + \"static/media/Android SDK built for x86_64.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/HUAWEI VNS-L31.be564da8.png\";","module.exports = __webpack_public_path__ + \"static/media/JKM-LX2.be564da8.png\";"],"sourceRoot":""}